/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Chains:List Chains
         * @description Retrieve a list of chains with filtering, sorting, and pagination.
         */
        get: operations["chains_list_chains_chains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Chains:Get Chain
         * @description Retrieve an chain by its ID.
         */
        get: operations["chains_get_chain_chains__chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Defis:List Defis
         * @description Retrieve a list of defis with filtering, sorting, and pagination.
         */
        get: operations["defis_list_defis_defis_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defis/{defi_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Defis:Get Defi
         * @description Retrieve an defi by its ID.
         */
        get: operations["defis_get_defi_defis__defi_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi_versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Defi Versions:List Defi Versions
         * @description Retrieve a list of defi_versions with filtering, sorting, and pagination.
         */
        get: operations["defi_versions_list_defi_versions_defi_versions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi_versions/{defi_version_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Defi Versions:Get Defi Version
         * @description Retrieve an defi_version by its ID.
         */
        get: operations["defi_versions_get_defi_version_defi_versions__defi_version_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi_pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Defi Pools:List Defi Pools
         * @description Retrieve a list of defi_pools with filtering, sorting, and pagination.
         */
        get: operations["defi_pools_list_defi_pools_defi_pools_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/defi_pools/{defi_pool_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Defi Pools:Get Defi Pool
         * @description Retrieve an defi_pool by its ID.
         */
        get: operations["defi_pools_get_defi_pool_defi_pools__defi_pool_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ChainListRead */
        ChainListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["ChainRead"][];
        };
        /** ChainRead */
        ChainRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Chain Id
             * @description Chain ID.
             */
            chain_id: number;
            /**
             * Name
             * @description Chain name.
             */
            name: string;
            /**
             * Native Symbol
             * @description Native currency symbol.
             */
            native_symbol: string;
            /**
             * Native Decimals
             * @description Native currency decimals.
             */
            native_decimals: number;
            /**
             * Logo Url
             * @description URL of the chain logo.
             */
            logo_url: string;
            /**
             * Created At
             * Format: date-time
             * @description Record creation timestamp.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Record update timestamp.
             */
            updated_at: string;
        };
        /** DefiListRead */
        DefiListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["DefiRead"][];
        };
        /** DefiPoolListRead */
        DefiPoolListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["DefiPoolRead"][];
        };
        /** DefiPoolRead */
        DefiPoolRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Address
             * @description The contract address of the DeFi protocol.
             */
            address: string;
            /**
             * Created Block Number
             * @description The block number when the DeFi protocol was created.
             */
            created_block_number: number;
            /**
             * Tick Spacing
             * @description The tick spacing of the DeFi pool.
             */
            tick_spacing: number;
            /**
             * Fee Tier Bps
             * @description The fee tier in basis points of the DeFi pool.
             */
            fee_tier_bps: number;
            /**
             * Created At
             * Format: date-time
             * @description Record creation timestamp.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Record update timestamp.
             */
            updated_at: string;
        };
        /** DefiRead */
        DefiRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Name
             * @description The name of the DeFi protocol.
             */
            name: string;
            /**
             * Logo Url
             * @description URL of the DeFi protocol logo.
             */
            logo_url: string;
            /**
             * Created At
             * Format: date-time
             * @description Record creation timestamp.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Record update timestamp.
             */
            updated_at: string;
        };
        /** DefiVersionListRead */
        DefiVersionListRead: {
            meta: components["schemas"]["ListResponseMeta"];
            /** Data */
            data: components["schemas"]["DefiVersionRead"][];
        };
        /** DefiVersionRead */
        DefiVersionRead: {
            /**
             * Id
             * @description The ID of the object
             * @example abcd1234xyzc
             */
            id: string;
            /**
             * Name
             * @description The name of the DeFi protocol.
             */
            name: string;
            /** @description The DeFi protocol this version belongs to. */
            defi: components["schemas"]["DefiRead"];
            /**
             * Created At
             * Format: date-time
             * @description Record creation timestamp.
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Record update timestamp.
             */
            updated_at: string;
        };
        /** ErrorDetail */
        ErrorDetail: {
            /** Status */
            status: string;
            /** Code */
            code: string;
            /** Title */
            title: string;
            /** Detail */
            detail: string;
            source?: components["schemas"]["ErrorSource"] | null;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /**
             * Type
             * @default about:blank
             */
            type: string;
            /** Title */
            title: string;
            /** Status */
            status: number;
            /** Instance */
            instance: string;
            /** Errors */
            errors: components["schemas"]["ErrorDetail"][];
        };
        /** ErrorSource */
        ErrorSource: {
            /** Pointer */
            pointer?: string | null;
        };
        /** ListResponseMeta */
        ListResponseMeta: {
            /**
             * Limit
             * @description Maximum number of items to retrieve
             * @default 100
             */
            limit: number;
            /**
             * Offset
             * @description Starting position for retrieval
             * @default 0
             */
            offset: number;
            /**
             * Sorted By
             * @description Field name to sort by
             * @default id
             */
            sorted_by: string | null;
            /**
             * Sorted Order
             * @description Sort order: asc or desc
             * @default asc
             */
            sorted_order: string;
            /**
             * Total Count
             * @description Total number of items matching the search criteria.
             * @example 100
             */
            total_count: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    chains_list_chains_chains_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                name__icontains?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChainListRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    chains_get_chain_chains__chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChainRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    defis_list_defis_defis_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                name__icontains?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DefiListRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    defis_get_defi_defis__defi_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                defi_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DefiRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    defi_versions_list_defi_versions_defi_versions_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                name__icontains?: string | null;
                defi_id__exact?: number | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DefiVersionListRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    defi_versions_get_defi_version_defi_versions__defi_version_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                defi_version_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DefiVersionRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    defi_pools_list_defi_pools_defi_pools_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                sorted_by?: string | null;
                sorted_order?: string;
                address__exact?: string | null;
                created_block_number__gte?: number | null;
                created_block_number__lte?: number | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                updated_at__gte?: string | null;
                updated_at__lte?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DefiPoolListRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    defi_pools_get_defi_pool_defi_pools__defi_pool_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                defi_pool_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DefiPoolRead"];
                };
            };
            /** @description Validation error. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
